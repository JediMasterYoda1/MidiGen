"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _makerBase = _interopRequireDefault(require("@electron-forge/maker-base"));
var _electronWinstaller = require("electron-winstaller");
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _path = _interopRequireDefault(require("path"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class MakerSquirrel extends _makerBase.default {
    isSupportedOnCurrentPlatform() {
        return this.isInstalled('electron-winstaller') && !process.env.DISABLE_SQUIRREL_TEST;
    }
    async make({ dir , makeDir , targetArch , packageJSON , appName , forgeConfig  }) {
        const outPath = _path.default.resolve(makeDir, `squirrel.windows/${targetArch}`);
        await this.ensureDirectory(outPath);
        const winstallerConfig = {
            name: packageJSON.name,
            title: appName,
            noMsi: true,
            exe: `${forgeConfig.packagerConfig.executableName || appName}.exe`,
            setupExe: `${appName}-${packageJSON.version} Setup.exe`,
            ...this.config,
            appDirectory: dir,
            outputDirectory: outPath
        };
        await (0, _electronWinstaller).createWindowsInstaller(winstallerConfig);
        const nupkgVersion = (0, _electronWinstaller).convertVersion(packageJSON.version);
        const artifacts = [
            _path.default.resolve(outPath, 'RELEASES'),
            _path.default.resolve(outPath, winstallerConfig.setupExe || `${appName}Setup.exe`),
            _path.default.resolve(outPath, `${winstallerConfig.name}-${nupkgVersion}-full.nupkg`), 
        ];
        const deltaPath = _path.default.resolve(outPath, `${winstallerConfig.name}-${nupkgVersion}-delta.nupkg`);
        if (winstallerConfig.remoteReleases || await _fsExtra.default.pathExists(deltaPath)) {
            artifacts.push(deltaPath);
        }
        const msiPath = _path.default.resolve(outPath, winstallerConfig.setupMsi || `${appName}Setup.msi`);
        if (!winstallerConfig.noMsi && await _fsExtra.default.pathExists(msiPath)) {
            artifacts.push(msiPath);
        }
        return artifacts;
    }
    constructor(...args){
        super(...args);
        this.name = 'squirrel';
        this.defaultPlatforms = [
            'win32'
        ];
    }
}
exports.default = MakerSquirrel;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NYWtlclNxdWlycmVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNYWtlckJhc2UsIHsgTWFrZXJPcHRpb25zIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL21ha2VyLWJhc2UnO1xuaW1wb3J0IHsgRm9yZ2VQbGF0Zm9ybSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VmVyc2lvbiwgY3JlYXRlV2luZG93c0luc3RhbGxlciwgT3B0aW9ucyBhcyBFbGVjdHJvbldpbnN0YWxsZXJPcHRpb25zIH0gZnJvbSAnZWxlY3Ryb24td2luc3RhbGxlcic7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbnR5cGUgTWFrZXJTcXVpcnJlbENvbmZpZyA9IE9taXQ8RWxlY3Ryb25XaW5zdGFsbGVyT3B0aW9ucywgJ2FwcERpcmVjdG9yeScgfCAnb3V0cHV0RGlyZWN0b3J5Jz47XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1ha2VyU3F1aXJyZWwgZXh0ZW5kcyBNYWtlckJhc2U8TWFrZXJTcXVpcnJlbENvbmZpZz4ge1xuICBuYW1lID0gJ3NxdWlycmVsJztcblxuICBkZWZhdWx0UGxhdGZvcm1zOiBGb3JnZVBsYXRmb3JtW10gPSBbJ3dpbjMyJ107XG5cbiAgaXNTdXBwb3J0ZWRPbkN1cnJlbnRQbGF0Zm9ybSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pc0luc3RhbGxlZCgnZWxlY3Ryb24td2luc3RhbGxlcicpICYmICFwcm9jZXNzLmVudi5ESVNBQkxFX1NRVUlSUkVMX1RFU1Q7XG4gIH1cblxuICBhc3luYyBtYWtlKHsgZGlyLCBtYWtlRGlyLCB0YXJnZXRBcmNoLCBwYWNrYWdlSlNPTiwgYXBwTmFtZSwgZm9yZ2VDb25maWcgfTogTWFrZXJPcHRpb25zKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIGNvbnN0IG91dFBhdGggPSBwYXRoLnJlc29sdmUobWFrZURpciwgYHNxdWlycmVsLndpbmRvd3MvJHt0YXJnZXRBcmNofWApO1xuICAgIGF3YWl0IHRoaXMuZW5zdXJlRGlyZWN0b3J5KG91dFBhdGgpO1xuXG4gICAgY29uc3Qgd2luc3RhbGxlckNvbmZpZzogRWxlY3Ryb25XaW5zdGFsbGVyT3B0aW9ucyA9IHtcbiAgICAgIG5hbWU6IHBhY2thZ2VKU09OLm5hbWUsXG4gICAgICB0aXRsZTogYXBwTmFtZSxcbiAgICAgIG5vTXNpOiB0cnVlLFxuICAgICAgZXhlOiBgJHtmb3JnZUNvbmZpZy5wYWNrYWdlckNvbmZpZy5leGVjdXRhYmxlTmFtZSB8fCBhcHBOYW1lfS5leGVgLFxuICAgICAgc2V0dXBFeGU6IGAke2FwcE5hbWV9LSR7cGFja2FnZUpTT04udmVyc2lvbn0gU2V0dXAuZXhlYCxcbiAgICAgIC4uLnRoaXMuY29uZmlnLFxuICAgICAgYXBwRGlyZWN0b3J5OiBkaXIsXG4gICAgICBvdXRwdXREaXJlY3Rvcnk6IG91dFBhdGgsXG4gICAgfTtcblxuICAgIGF3YWl0IGNyZWF0ZVdpbmRvd3NJbnN0YWxsZXIod2luc3RhbGxlckNvbmZpZyk7XG5cbiAgICBjb25zdCBudXBrZ1ZlcnNpb24gPSBjb252ZXJ0VmVyc2lvbihwYWNrYWdlSlNPTi52ZXJzaW9uKTtcblxuICAgIGNvbnN0IGFydGlmYWN0cyA9IFtcbiAgICAgIHBhdGgucmVzb2x2ZShvdXRQYXRoLCAnUkVMRUFTRVMnKSxcbiAgICAgIHBhdGgucmVzb2x2ZShvdXRQYXRoLCB3aW5zdGFsbGVyQ29uZmlnLnNldHVwRXhlIHx8IGAke2FwcE5hbWV9U2V0dXAuZXhlYCksXG4gICAgICBwYXRoLnJlc29sdmUob3V0UGF0aCwgYCR7d2luc3RhbGxlckNvbmZpZy5uYW1lfS0ke251cGtnVmVyc2lvbn0tZnVsbC5udXBrZ2ApLFxuICAgIF07XG4gICAgY29uc3QgZGVsdGFQYXRoID0gcGF0aC5yZXNvbHZlKG91dFBhdGgsIGAke3dpbnN0YWxsZXJDb25maWcubmFtZX0tJHtudXBrZ1ZlcnNpb259LWRlbHRhLm51cGtnYCk7XG4gICAgaWYgKHdpbnN0YWxsZXJDb25maWcucmVtb3RlUmVsZWFzZXMgfHwgKGF3YWl0IGZzLnBhdGhFeGlzdHMoZGVsdGFQYXRoKSkpIHtcbiAgICAgIGFydGlmYWN0cy5wdXNoKGRlbHRhUGF0aCk7XG4gICAgfVxuICAgIGNvbnN0IG1zaVBhdGggPSBwYXRoLnJlc29sdmUob3V0UGF0aCwgd2luc3RhbGxlckNvbmZpZy5zZXR1cE1zaSB8fCBgJHthcHBOYW1lfVNldHVwLm1zaWApO1xuICAgIGlmICghd2luc3RhbGxlckNvbmZpZy5ub01zaSAmJiAoYXdhaXQgZnMucGF0aEV4aXN0cyhtc2lQYXRoKSkpIHtcbiAgICAgIGFydGlmYWN0cy5wdXNoKG1zaVBhdGgpO1xuICAgIH1cbiAgICByZXR1cm4gYXJ0aWZhY3RzO1xuICB9XG59XG4iXSwibmFtZXMiOlsiTWFrZXJTcXVpcnJlbCIsIk1ha2VyQmFzZSIsImlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0iLCJpc0luc3RhbGxlZCIsInByb2Nlc3MiLCJlbnYiLCJESVNBQkxFX1NRVUlSUkVMX1RFU1QiLCJtYWtlIiwiZGlyIiwibWFrZURpciIsInRhcmdldEFyY2giLCJwYWNrYWdlSlNPTiIsImFwcE5hbWUiLCJmb3JnZUNvbmZpZyIsIm91dFBhdGgiLCJwYXRoIiwicmVzb2x2ZSIsImVuc3VyZURpcmVjdG9yeSIsIndpbnN0YWxsZXJDb25maWciLCJuYW1lIiwidGl0bGUiLCJub01zaSIsImV4ZSIsInBhY2thZ2VyQ29uZmlnIiwiZXhlY3V0YWJsZU5hbWUiLCJzZXR1cEV4ZSIsInZlcnNpb24iLCJjb25maWciLCJhcHBEaXJlY3RvcnkiLCJvdXRwdXREaXJlY3RvcnkiLCJjcmVhdGVXaW5kb3dzSW5zdGFsbGVyIiwibnVwa2dWZXJzaW9uIiwiY29udmVydFZlcnNpb24iLCJhcnRpZmFjdHMiLCJkZWx0YVBhdGgiLCJyZW1vdGVSZWxlYXNlcyIsImZzIiwicGF0aEV4aXN0cyIs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