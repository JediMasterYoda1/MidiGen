"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "StartOptions", {
    enumerable: true,
    get: function() {
        return _sharedTypes.StartOptions;
    }
});
exports.default = void 0;
var _asyncOra = require("@electron-forge/async-ora");
var _chalk = _interopRequireDefault(require("chalk"));
var _debug = _interopRequireDefault(require("debug"));
var _sharedTypes = require("@electron-forge/shared-types");
var _childProcess = require("child_process");
var _electronVersion = require("../util/electron-version");
var _forgeConfig = _interopRequireDefault(require("../util/forge-config"));
var _electronExecutable = _interopRequireDefault(require("../util/electron-executable"));
var _readPackageJson = require("../util/read-package-json");
var _rebuild = _interopRequireDefault(require("../util/rebuild"));
var _resolveDir = _interopRequireDefault(require("../util/resolve-dir"));
var _hook = require("../util/hook");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:start');
var _default = async ({ dir =process.cwd() , appPath ='.' , interactive =false , enableLogging =false , args =[] , runAsNode =false , inspect =false , inspectBrk =false  })=>{
    _asyncOra.asyncOra.interactive = interactive;
    await (0, _asyncOra).asyncOra('Locating Application', async ()=>{
        const resolvedDir = await (0, _resolveDir).default(dir);
        if (!resolvedDir) {
            throw new Error('Failed to locate startable Electron application');
        }
        dir = resolvedDir;
    });
    const forgeConfig = await (0, _forgeConfig).default(dir);
    const packageJSON = await (0, _readPackageJson).readMutatedPackageJson(dir, forgeConfig);
    if (!packageJSON.version) {
        throw new Error(`Please set your application's 'version' in '${dir}/package.json'.`);
    }
    const platform = process.env.npm_config_platform || process.platform;
    const arch = process.env.npm_config_arch || process.arch;
    await (0, _rebuild).default(dir, await (0, _electronVersion).getElectronVersion(dir, packageJSON), platform, arch, forgeConfig.electronRebuildConfig);
    await (0, _hook).runHook(forgeConfig, 'generateAssets', platform, arch);
    let lastSpawned = null;
    const forgeSpawn = async ()=>{
        let electronExecPath = null;
        // If a plugin has taken over the start command let's stop here
        const spawnedPluginChild = await forgeConfig.pluginInterface.overrideStartLogic({
            dir,
            appPath,
            interactive,
            enableLogging,
            args,
            runAsNode,
            inspect,
            inspectBrk
        });
        let prefixArgs = [];
        if (typeof spawnedPluginChild === 'string') {
            electronExecPath = spawnedPluginChild;
        } else if (Array.isArray(spawnedPluginChild)) {
            [electronExecPath, ...prefixArgs] = spawnedPluginChild;
        } else if (spawnedPluginChild) {
            await (0, _hook).runHook(forgeConfig, 'postStart', spawnedPluginChild);
            return spawnedPluginChild;
        }
        if (!electronExecPath) {
            electronExecPath = await (0, _electronExecutable).default(dir, packageJSON);
        }
        d('Electron binary path:', electronExecPath);
        const spawnOpts = {
            cwd: dir,
            stdio: 'inherit',
            env: {
                ...process.env,
                ...enableLogging ? {
                    ELECTRON_ENABLE_LOGGING: 'true',
                    ELECTRON_ENABLE_STACK_DUMPING: 'true'
                } : {}
            }
        };
        if (runAsNode) {
            spawnOpts.env.ELECTRON_RUN_AS_NODE = 'true';
        } else {
            delete spawnOpts.env.ELECTRON_RUN_AS_NODE;
        }
        if (inspect) {
            args = [
                '--inspect'
            ].concat(args);
        }
        if (inspectBrk) {
            args = [
                '--inspect-brk'
            ].concat(args);
        }
        let spawned;
        await (0, _asyncOra).asyncOra('Launching Application', async ()=>{
            spawned = (0, _childProcess).spawn(electronExecPath, prefixArgs.concat([
                appPath
            ]).concat(args), spawnOpts);
        });
        await (0, _hook).runHook(forgeConfig, 'postStart', spawned);
        return spawned;
    };
    const forgeSpawnWrapper = async ()=>{
        const spawned = await forgeSpawn();
        // When the child app is closed we should stop listening for stdin
        if (spawned) {
            if (interactive && process.stdin.isPaused()) {
                process.stdin.resume();
            }
            spawned.on('exit', ()=>{
                if (spawned.restarted) return;
                if (!process.stdin.isPaused()) process.stdin.pause();
            });
        } else if (interactive && !process.stdin.isPaused()) {
            process.stdin.pause();
        }
        lastSpawned = spawned;
        return lastSpawned;
    };
    if (interactive) {
        process.stdin.on('data', async (data)=>{
            if (data.toString().trim() === 'rs' && lastSpawned) {
                // eslint-disable-next-line no-console
                console.info(_chalk.default.cyan('\nRestarting App\n'));
                lastSpawned.restarted = true;
                lastSpawned.kill('SIGTERM');
                lastSpawned.emit('restarted', await forgeSpawnWrapper());
            }
        });
    }
    return forgeSpawnWrapper();
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,