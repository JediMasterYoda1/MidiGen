"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _chalk = _interopRequireDefault(require("chalk"));
var _ora = _interopRequireDefault(require("./ora"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class OraImpl {
    // eslint-disable-next-line no-empty-function, no-useless-constructor
    constructor(text = ''){
        this.text = text;
    }
    succeed(_symbol) {
        return this;
    }
    fail(_symbol) {
        return this;
    }
    start() {
        return this;
    }
    stop(_symbol) {
        return this;
    }
    warn(_message) {
        return this;
    }
}
exports.OraImpl = OraImpl;
const asyncOra = (initialOraValue, asyncFn, processExitFn = process.exit)=>{
    let fnOra = new OraImpl(initialOraValue);
    if (asyncOra.interactive) {
        fnOra = (0, _ora).default(initialOraValue).start();
    }
    return new Promise((resolve, reject)=>{
        asyncFn(fnOra).then(()=>{
            fnOra.succeed();
            return resolve();
        }).catch((err)=>{
            fnOra.fail();
            if (asyncOra.interactive) {
                if (err && err.message && err.stack) {
                    console.error(_chalk.default.red('\nAn unhandled error has occurred inside Forge:'));
                    console.error(_chalk.default.red(err.message));
                    console.error(_chalk.default.red(err.stack));
                } else {
                    console.error(_chalk.default.red('\nElectron Forge was terminated:'));
                    console.error(_chalk.default.red(typeof err === 'string' ? err : JSON.stringify(err)));
                }
                processExitFn(1);
                // If the process is still alive we should continue because either
                // something went really wrong or we are testing this function
                setTimeout(()=>resolve()
                , 500);
            } else {
                reject(err);
            }
        });
    });
};
asyncOra.interactive = true;
var _default = asyncOra;
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vcmEtaGFuZGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgXCJuby1jb25zb2xlXCI6IFwib2ZmXCIgKi9cbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgb3JhIGZyb20gJy4vb3JhJztcblxuZXhwb3J0IGNsYXNzIE9yYUltcGwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHktZnVuY3Rpb24sIG5vLXVzZWxlc3MtY29uc3RydWN0b3JcbiAgY29uc3RydWN0b3IocHVibGljIHRleHQ6IHN0cmluZyA9ICcnKSB7fVxuXG4gIHN1Y2NlZWQoX3N5bWJvbD86IHN0cmluZyk6IE9yYUltcGwge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZmFpbChfc3ltYm9sPzogc3RyaW5nKTogT3JhSW1wbCB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzdGFydCgpOiBPcmFJbXBsIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHN0b3AoX3N5bWJvbD86IHN0cmluZyk6IE9yYUltcGwge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgd2FybihfbWVzc2FnZTogc3RyaW5nKTogT3JhSW1wbCB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBc3luY09yYU1ldGhvZCB7XG4gIChpbml0aWFsT3JhVmFsdWU6IHN0cmluZywgYXN5bmNGbjogKG9yYUltcGw6IE9yYUltcGwpID0+IFByb21pc2U8dm9pZD4sIHByb2Nlc3NFeGl0Rm4/OiAoY29kZTogbnVtYmVyKSA9PiB2b2lkKTogUHJvbWlzZTx2b2lkPjtcbiAgaW50ZXJhY3RpdmU/OiBib29sZWFuO1xufVxuXG5jb25zdCBhc3luY09yYTogQXN5bmNPcmFNZXRob2QgPSAoaW5pdGlhbE9yYVZhbHVlLCBhc3luY0ZuLCBwcm9jZXNzRXhpdEZuID0gcHJvY2Vzcy5leGl0KSA9PiB7XG4gIGxldCBmbk9yYSA9IG5ldyBPcmFJbXBsKGluaXRpYWxPcmFWYWx1ZSk7XG4gIGlmIChhc3luY09yYS5pbnRlcmFjdGl2ZSkge1xuICAgIGZuT3JhID0gb3JhKGluaXRpYWxPcmFWYWx1ZSkuc3RhcnQoKTtcbiAgfVxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGFzeW5jRm4oZm5PcmEpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGZuT3JhLnN1Y2NlZWQoKTtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBmbk9yYS5mYWlsKCk7XG4gICAgICAgIGlmIChhc3luY09yYS5pbnRlcmFjdGl2ZSkge1xuICAgICAgICAgIGlmIChlcnIgJiYgZXJyLm1lc3NhZ2UgJiYgZXJyLnN0YWNrKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGNoYWxrLnJlZCgnXFxuQW4gdW5oYW5kbGVkIGVycm9yIGhhcyBvY2N1cnJlZCBpbnNpZGUgRm9yZ2U6JykpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihjaGFsay5yZWQoZXJyLm1lc3NhZ2UpKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoY2hhbGsucmVkKGVyci5zdGFjaykpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGNoYWxrLnJlZCgnXFxuRWxlY3Ryb24gRm9yZ2Ugd2FzIHRlcm1pbmF0ZWQ6JykpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihjaGFsay5yZWQodHlwZW9mIGVyciA9PT0gJ3N0cmluZycgPyBlcnIgOiBKU09OLnN0cmluZ2lmeShlcnIpKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByb2Nlc3NFeGl0Rm4oMSk7XG4gICAgICAgICAgLy8gSWYgdGhlIHByb2Nlc3MgaXMgc3RpbGwgYWxpdmUgd2Ugc2hvdWxkIGNvbnRpbnVlIGJlY2F1c2UgZWl0aGVyXG4gICAgICAgICAgLy8gc29tZXRoaW5nIHdlbnQgcmVhbGx5IHdyb25nIG9yIHdlIGFyZSB0ZXN0aW5nIHRoaXMgZnVuY3Rpb25cbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUoKSwgNTAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH0pO1xufTtcblxuYXN5bmNPcmEuaW50ZXJhY3RpdmUgPSB0cnVlO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luY09yYTtcbiJdLCJuYW1lcyI6WyJPcmFJbXBsIiwidGV4dCIsInN1Y2NlZWQiLCJfc3ltYm9sIiwiZmFpbCIsInN0YXJ0Iiwic3RvcCIsIndhcm4iLCJfbWVzc2FnZSIsImFzeW5jT3JhIiwiaW5pdGlhbE9yYVZhbHVlIiwiYXN5bmNGbiIsInByb2Nlc3NFeGl0Rm4iLCJwcm9jZXNzIiwiZXhpdCIsImZuT3JhIiwiaW50ZXJhY3RpdmUiLCJvcmEiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInRoZW4iLCJjYXRjaCIsImVyciIsIm1lc3NhZ2UiLCJzdGFjayIsImNvbnNvbGUiLCJlcnJvciIsImNoYWxrIiwicmVkIiwiSlNPTiIsInN0cmluZ2lmeSIsInNldFRpbWVvdXQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ2tCLEdBQU8sQ0FBUCxNQUFPO0FBQ1QsR0FBTyxDQUFQLElBQU87Ozs7OztNQUVWQSxPQUFPO0lBQ2xCLEVBQXFFLEFBQXJFLG1FQUFxRTtnQkFDbERDLElBQVksR0FBRyxDQUFFLEVBQUUsQ0FBQzthQUFwQkEsSUFBWSxHQUFaQSxJQUFZO0lBQVEsQ0FBQztJQUV4Q0MsT0FBTyxDQUFDQyxPQUFnQixFQUFXLENBQUM7UUFDbEMsTUFBTSxDQUFDLElBQUk7SUFDYixDQUFDO0lBRURDLElBQUksQ0FBQ0QsT0FBZ0IsRUFBVyxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxJQUFJO0lBQ2IsQ0FBQztJQUVERSxLQUFLLEdBQVksQ0FBQztRQUNoQixNQUFNLENBQUMsSUFBSTtJQUNiLENBQUM7SUFFREMsSUFBSSxDQUFDSCxPQUFnQixFQUFXLENBQUM7UUFDL0IsTUFBTSxDQUFDLElBQUk7SUFDYixDQUFDO0lBRURJLElBQUksQ0FBQ0MsUUFBZ0IsRUFBVyxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxJQUFJO0lBQ2IsQ0FBQzs7UUF0QlVSLE9BQU8sR0FBUEEsT0FBTztBQThCcEIsS0FBSyxDQUFDUyxRQUFRLElBQW9CQyxlQUFlLEVBQUVDLE9BQU8sRUFBRUMsYUFBYSxHQUFHQyxPQUFPLENBQUNDLElBQUksR0FBSyxDQUFDO0lBQzVGLEdBQUcsQ0FBQ0MsS0FBSyxHQUFHLEdBQUcsQ0FBQ2YsT0FBTyxDQUFDVSxlQUFlO0lBQ3ZDLEVBQUUsRUFBRUQsUUFBUSxDQUFDTyxXQUFXLEVBQUUsQ0FBQztRQUN6QkQsS0FBSyxPQUFHRSxJQUFHLFVBQUNQLGVBQWUsRUFBRUwsS0FBSztJQUNwQyxDQUFDO0lBQ0QsTUFBTSxDQUFDLEdBQUcsQ0FBQ2EsT0FBTyxFQUFFQyxPQUFPLEVBQUVDLE1BQU0sR0FBSyxDQUFDO1FBQ3ZDVCxPQUFPLENBQUNJLEtBQUssRUFDVk0sSUFBSSxLQUFPLENBQUM7WUFDWE4sS0FBSyxDQUFDYixPQUFPO1lBQ2IsTUFBTSxDQUFDaUIsT0FBTztRQUNoQixDQUFDLEVBQ0FHLEtBQUssRUFBRUMsR0FBRyxHQUFLLENBQUM7WUFDZlIsS0FBSyxDQUFDWCxJQUFJO1lBQ1YsRUFBRSxFQUFFSyxRQUFRLENBQUNPLFdBQVcsRUFBRSxDQUFDO2dCQUN6QixFQUFFLEVBQUVPLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxPQUFPLElBQUlELEdBQUcsQ0FBQ0UsS0FBSyxFQUFFLENBQUM7b0JBQ3BDQyxPQUFPLENBQUNDLEtBQUssQ0FBQ0MsTUFBSyxTQUFDQyxHQUFHLENBQUMsQ0FBaUQ7b0JBQ3pFSCxPQUFPLENBQUNDLEtBQUssQ0FBQ0MsTUFBSyxTQUFDQyxHQUFHLENBQUNOLEdBQUcsQ0FBQ0MsT0FBTztvQkFDbkNFLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDQyxNQUFLLFNBQUNDLEdBQUcsQ0FBQ04sR0FBRyxDQUFDRSxLQUFLO2dCQUNuQyxDQUFDLE1BQU0sQ0FBQztvQkFDTkMsT0FBTyxDQUFDQyxLQUFLLENBQUNDLE1BQUssU0FBQ0MsR0FBRyxDQUFDLENBQWtDO29CQUMxREgsT0FBTyxDQUFDQyxLQUFLLENBQUNDLE1BQUssU0FBQ0MsR0FBRyxDQUFDLE1BQU0sQ0FBQ04sR0FBRyxLQUFLLENBQVEsVUFBR0EsR0FBRyxHQUFHTyxJQUFJLENBQUNDLFNBQVMsQ0FBQ1IsR0FBRztnQkFDNUUsQ0FBQztnQkFDRFgsYUFBYSxDQUFDLENBQUM7Z0JBQ2YsRUFBa0UsQUFBbEUsZ0VBQWtFO2dCQUNsRSxFQUE4RCxBQUE5RCw0REFBOEQ7Z0JBQzlEb0IsVUFBVSxLQUFPYixPQUFPO2tCQUFJLEdBQUc7WUFDakMsQ0FBQyxNQUFNLENBQUM7Z0JBQ05DLE1BQU0sQ0FBQ0csR0FBRztZQUNaLENBQUM7UUFDSCxDQUFDO0lBQ0wsQ0FBQztBQUNILENBQUM7QUFFRGQsUUFBUSxDQUFDTyxXQUFXLEdBQUcsSUFBSTtlQUVaUCxRQUFRIn0=